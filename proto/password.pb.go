// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: password.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		password.proto

	It has these top-level messages:
		PasswordCreateRequest
		PasswordCreateResponse
		PasswordUpdateRequest
		PasswordUpdateResponse
		PasswordDeleteRequest
		PasswordDeleteResponse
		PasswordValidateRequest
		PasswordValidateResponse
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PasswordHashType int32

const (
	ARGON2 PasswordHashType = 0
	BCRYPT PasswordHashType = 1
)

var PasswordHashType_name = map[int32]string{
	0: "ARGON2",
	1: "BCRYPT",
}
var PasswordHashType_value = map[string]int32{
	"ARGON2": 0,
	"BCRYPT": 1,
}

func (PasswordHashType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPassword, []int{0} }

type PasswordCreateRequest struct {
	Type          PasswordHashType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.PasswordHashType" json:"type,omitempty"`
	PlainPassword string           `protobuf:"bytes,2,opt,name=plainPassword,proto3" json:"plainPassword,omitempty"`
}

func (m *PasswordCreateRequest) Reset()                    { *m = PasswordCreateRequest{} }
func (*PasswordCreateRequest) ProtoMessage()               {}
func (*PasswordCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorPassword, []int{0} }

func (m *PasswordCreateRequest) GetType() PasswordHashType {
	if m != nil {
		return m.Type
	}
	return ARGON2
}

func (m *PasswordCreateRequest) GetPlainPassword() string {
	if m != nil {
		return m.PlainPassword
	}
	return ""
}

type PasswordCreateResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PasswordCreateResponse) Reset()                    { *m = PasswordCreateResponse{} }
func (*PasswordCreateResponse) ProtoMessage()               {}
func (*PasswordCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorPassword, []int{1} }

func (m *PasswordCreateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PasswordCreateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PasswordUpdateRequest struct {
	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OldPlainPassword string `protobuf:"bytes,2,opt,name=oldPlainPassword,proto3" json:"oldPlainPassword,omitempty"`
	NewPlainPassword string `protobuf:"bytes,3,opt,name=newPlainPassword,proto3" json:"newPlainPassword,omitempty"`
}

func (m *PasswordUpdateRequest) Reset()                    { *m = PasswordUpdateRequest{} }
func (*PasswordUpdateRequest) ProtoMessage()               {}
func (*PasswordUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorPassword, []int{2} }

func (m *PasswordUpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PasswordUpdateRequest) GetOldPlainPassword() string {
	if m != nil {
		return m.OldPlainPassword
	}
	return ""
}

func (m *PasswordUpdateRequest) GetNewPlainPassword() string {
	if m != nil {
		return m.NewPlainPassword
	}
	return ""
}

type PasswordUpdateResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PasswordUpdateResponse) Reset()                    { *m = PasswordUpdateResponse{} }
func (*PasswordUpdateResponse) ProtoMessage()               {}
func (*PasswordUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptorPassword, []int{3} }

func (m *PasswordUpdateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PasswordUpdateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PasswordDeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PasswordDeleteRequest) Reset()                    { *m = PasswordDeleteRequest{} }
func (*PasswordDeleteRequest) ProtoMessage()               {}
func (*PasswordDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorPassword, []int{4} }

func (m *PasswordDeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PasswordDeleteResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *PasswordDeleteResponse) Reset()                    { *m = PasswordDeleteResponse{} }
func (*PasswordDeleteResponse) ProtoMessage()               {}
func (*PasswordDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorPassword, []int{5} }

func (m *PasswordDeleteResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PasswordValidateRequest struct {
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PlainPassword string `protobuf:"bytes,2,opt,name=plainPassword,proto3" json:"plainPassword,omitempty"`
}

func (m *PasswordValidateRequest) Reset()                    { *m = PasswordValidateRequest{} }
func (*PasswordValidateRequest) ProtoMessage()               {}
func (*PasswordValidateRequest) Descriptor() ([]byte, []int) { return fileDescriptorPassword, []int{6} }

func (m *PasswordValidateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PasswordValidateRequest) GetPlainPassword() string {
	if m != nil {
		return m.PlainPassword
	}
	return ""
}

type PasswordValidateResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PasswordValidateResponse) Reset()                    { *m = PasswordValidateResponse{} }
func (*PasswordValidateResponse) ProtoMessage()               {}
func (*PasswordValidateResponse) Descriptor() ([]byte, []int) { return fileDescriptorPassword, []int{7} }

func (m *PasswordValidateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PasswordValidateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto1.RegisterType((*PasswordCreateRequest)(nil), "proto.PasswordCreateRequest")
	proto1.RegisterType((*PasswordCreateResponse)(nil), "proto.PasswordCreateResponse")
	proto1.RegisterType((*PasswordUpdateRequest)(nil), "proto.PasswordUpdateRequest")
	proto1.RegisterType((*PasswordUpdateResponse)(nil), "proto.PasswordUpdateResponse")
	proto1.RegisterType((*PasswordDeleteRequest)(nil), "proto.PasswordDeleteRequest")
	proto1.RegisterType((*PasswordDeleteResponse)(nil), "proto.PasswordDeleteResponse")
	proto1.RegisterType((*PasswordValidateRequest)(nil), "proto.PasswordValidateRequest")
	proto1.RegisterType((*PasswordValidateResponse)(nil), "proto.PasswordValidateResponse")
	proto1.RegisterEnum("proto.PasswordHashType", PasswordHashType_name, PasswordHashType_value)
}
func (x PasswordHashType) String() string {
	s, ok := PasswordHashType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *PasswordCreateRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PasswordCreateRequest)
	if !ok {
		that2, ok := that.(PasswordCreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.PlainPassword != that1.PlainPassword {
		return false
	}
	return true
}
func (this *PasswordCreateResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PasswordCreateResponse)
	if !ok {
		that2, ok := that.(PasswordCreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *PasswordUpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PasswordUpdateRequest)
	if !ok {
		that2, ok := that.(PasswordUpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.OldPlainPassword != that1.OldPlainPassword {
		return false
	}
	if this.NewPlainPassword != that1.NewPlainPassword {
		return false
	}
	return true
}
func (this *PasswordUpdateResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PasswordUpdateResponse)
	if !ok {
		that2, ok := that.(PasswordUpdateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *PasswordDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PasswordDeleteRequest)
	if !ok {
		that2, ok := that.(PasswordDeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *PasswordDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PasswordDeleteResponse)
	if !ok {
		that2, ok := that.(PasswordDeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *PasswordValidateRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PasswordValidateRequest)
	if !ok {
		that2, ok := that.(PasswordValidateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.PlainPassword != that1.PlainPassword {
		return false
	}
	return true
}
func (this *PasswordValidateResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PasswordValidateResponse)
	if !ok {
		that2, ok := that.(PasswordValidateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *PasswordCreateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.PasswordCreateRequest{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "PlainPassword: "+fmt.Sprintf("%#v", this.PlainPassword)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PasswordCreateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.PasswordCreateResponse{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PasswordUpdateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.PasswordUpdateRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "OldPlainPassword: "+fmt.Sprintf("%#v", this.OldPlainPassword)+",\n")
	s = append(s, "NewPlainPassword: "+fmt.Sprintf("%#v", this.NewPlainPassword)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PasswordUpdateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.PasswordUpdateResponse{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PasswordDeleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.PasswordDeleteRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PasswordDeleteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.PasswordDeleteResponse{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PasswordValidateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.PasswordValidateRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "PlainPassword: "+fmt.Sprintf("%#v", this.PlainPassword)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PasswordValidateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.PasswordValidateResponse{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPassword(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Password service

type PasswordClient interface {
	PasswordCreate(ctx context.Context, in *PasswordCreateRequest, opts ...grpc.CallOption) (*PasswordCreateResponse, error)
	PasswordUpdate(ctx context.Context, in *PasswordUpdateRequest, opts ...grpc.CallOption) (*PasswordUpdateResponse, error)
	PasswordDelete(ctx context.Context, in *PasswordDeleteRequest, opts ...grpc.CallOption) (*PasswordDeleteResponse, error)
	PasswordValidate(ctx context.Context, in *PasswordValidateRequest, opts ...grpc.CallOption) (*PasswordValidateResponse, error)
}

type passwordClient struct {
	cc *grpc.ClientConn
}

func NewPasswordClient(cc *grpc.ClientConn) PasswordClient {
	return &passwordClient{cc}
}

func (c *passwordClient) PasswordCreate(ctx context.Context, in *PasswordCreateRequest, opts ...grpc.CallOption) (*PasswordCreateResponse, error) {
	out := new(PasswordCreateResponse)
	err := grpc.Invoke(ctx, "/proto.Password/PasswordCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordClient) PasswordUpdate(ctx context.Context, in *PasswordUpdateRequest, opts ...grpc.CallOption) (*PasswordUpdateResponse, error) {
	out := new(PasswordUpdateResponse)
	err := grpc.Invoke(ctx, "/proto.Password/PasswordUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordClient) PasswordDelete(ctx context.Context, in *PasswordDeleteRequest, opts ...grpc.CallOption) (*PasswordDeleteResponse, error) {
	out := new(PasswordDeleteResponse)
	err := grpc.Invoke(ctx, "/proto.Password/PasswordDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordClient) PasswordValidate(ctx context.Context, in *PasswordValidateRequest, opts ...grpc.CallOption) (*PasswordValidateResponse, error) {
	out := new(PasswordValidateResponse)
	err := grpc.Invoke(ctx, "/proto.Password/PasswordValidate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Password service

type PasswordServer interface {
	PasswordCreate(context.Context, *PasswordCreateRequest) (*PasswordCreateResponse, error)
	PasswordUpdate(context.Context, *PasswordUpdateRequest) (*PasswordUpdateResponse, error)
	PasswordDelete(context.Context, *PasswordDeleteRequest) (*PasswordDeleteResponse, error)
	PasswordValidate(context.Context, *PasswordValidateRequest) (*PasswordValidateResponse, error)
}

func RegisterPasswordServer(s *grpc.Server, srv PasswordServer) {
	s.RegisterService(&_Password_serviceDesc, srv)
}

func _Password_PasswordCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).PasswordCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Password/PasswordCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).PasswordCreate(ctx, req.(*PasswordCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Password_PasswordUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).PasswordUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Password/PasswordUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).PasswordUpdate(ctx, req.(*PasswordUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Password_PasswordDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).PasswordDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Password/PasswordDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).PasswordDelete(ctx, req.(*PasswordDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Password_PasswordValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).PasswordValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Password/PasswordValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).PasswordValidate(ctx, req.(*PasswordValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Password_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Password",
	HandlerType: (*PasswordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PasswordCreate",
			Handler:    _Password_PasswordCreate_Handler,
		},
		{
			MethodName: "PasswordUpdate",
			Handler:    _Password_PasswordUpdate_Handler,
		},
		{
			MethodName: "PasswordDelete",
			Handler:    _Password_PasswordDelete_Handler,
		},
		{
			MethodName: "PasswordValidate",
			Handler:    _Password_PasswordValidate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "password.proto",
}

func (m *PasswordCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPassword(dAtA, i, uint64(m.Type))
	}
	if len(m.PlainPassword) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassword(dAtA, i, uint64(len(m.PlainPassword)))
		i += copy(dAtA[i:], m.PlainPassword)
	}
	return i, nil
}

func (m *PasswordCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassword(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *PasswordUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPassword(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.OldPlainPassword) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassword(dAtA, i, uint64(len(m.OldPlainPassword)))
		i += copy(dAtA[i:], m.OldPlainPassword)
	}
	if len(m.NewPlainPassword) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPassword(dAtA, i, uint64(len(m.NewPlainPassword)))
		i += copy(dAtA[i:], m.NewPlainPassword)
	}
	return i, nil
}

func (m *PasswordUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassword(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *PasswordDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPassword(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *PasswordDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PasswordValidateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordValidateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPassword(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.PlainPassword) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassword(dAtA, i, uint64(len(m.PlainPassword)))
		i += copy(dAtA[i:], m.PlainPassword)
	}
	return i, nil
}

func (m *PasswordValidateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordValidateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPassword(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func encodeVarintPassword(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PasswordCreateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPassword(uint64(m.Type))
	}
	l = len(m.PlainPassword)
	if l > 0 {
		n += 1 + l + sovPassword(uint64(l))
	}
	return n
}

func (m *PasswordCreateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPassword(uint64(l))
	}
	return n
}

func (m *PasswordUpdateRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPassword(uint64(l))
	}
	l = len(m.OldPlainPassword)
	if l > 0 {
		n += 1 + l + sovPassword(uint64(l))
	}
	l = len(m.NewPlainPassword)
	if l > 0 {
		n += 1 + l + sovPassword(uint64(l))
	}
	return n
}

func (m *PasswordUpdateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPassword(uint64(l))
	}
	return n
}

func (m *PasswordDeleteRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPassword(uint64(l))
	}
	return n
}

func (m *PasswordDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *PasswordValidateRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPassword(uint64(l))
	}
	l = len(m.PlainPassword)
	if l > 0 {
		n += 1 + l + sovPassword(uint64(l))
	}
	return n
}

func (m *PasswordValidateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPassword(uint64(l))
	}
	return n
}

func sovPassword(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPassword(x uint64) (n int) {
	return sovPassword(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PasswordCreateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordCreateRequest{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`PlainPassword:` + fmt.Sprintf("%v", this.PlainPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordCreateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordCreateResponse{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordUpdateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordUpdateRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`OldPlainPassword:` + fmt.Sprintf("%v", this.OldPlainPassword) + `,`,
		`NewPlainPassword:` + fmt.Sprintf("%v", this.NewPlainPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordUpdateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordUpdateResponse{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordDeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordDeleteRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordDeleteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordDeleteResponse{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordValidateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordValidateRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`PlainPassword:` + fmt.Sprintf("%v", this.PlainPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordValidateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PasswordValidateResponse{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPassword(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PasswordCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassword
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PasswordHashType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlainPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassword
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlainPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassword(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassword
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassword
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassword
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassword(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassword
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassword
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassword
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPlainPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassword
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldPlainPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPlainPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassword
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPlainPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassword(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassword
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassword
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassword
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassword(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassword
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassword
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassword
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassword(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassword
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassword
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPassword(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassword
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordValidateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassword
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordValidateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordValidateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassword
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlainPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassword
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlainPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassword(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassword
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordValidateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassword
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordValidateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordValidateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassword
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassword(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPassword
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPassword(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPassword
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPassword
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPassword
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPassword
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPassword(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPassword = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPassword   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("password.proto", fileDescriptorPassword) }

var fileDescriptorPassword = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x6e, 0xda, 0x40,
	0x10, 0xf6, 0xba, 0x2d, 0xa5, 0x2b, 0xd5, 0xb2, 0x56, 0x6a, 0xb1, 0x50, 0xbb, 0x45, 0x56, 0xa5,
	0x22, 0xda, 0x82, 0xe4, 0x3e, 0x41, 0x01, 0xa9, 0x3d, 0x05, 0x64, 0x41, 0xa4, 0x1c, 0x0d, 0xde,
	0x80, 0x23, 0x87, 0x75, 0x58, 0x5b, 0x88, 0x53, 0xf2, 0x08, 0x79, 0x8c, 0x3c, 0x4a, 0x8e, 0x1c,
	0x72, 0xc8, 0x31, 0x38, 0x97, 0x1c, 0x79, 0x84, 0x88, 0x75, 0x36, 0x66, 0xed, 0x90, 0x84, 0xd3,
	0xee, 0xcc, 0x7c, 0xf3, 0xcd, 0xcf, 0x37, 0x50, 0x0b, 0x1c, 0xc6, 0x66, 0x74, 0xea, 0xd6, 0x83,
	0x29, 0x0d, 0x29, 0x7a, 0xc7, 0x9f, 0xf2, 0xef, 0x91, 0x17, 0x8e, 0xa3, 0x41, 0x7d, 0x48, 0x8f,
	0x1b, 0x23, 0x3a, 0xa2, 0x0d, 0xee, 0x1e, 0x44, 0x87, 0xdc, 0xe2, 0x06, 0xff, 0x25, 0x59, 0xe6,
	0x11, 0xfc, 0xd4, 0x7d, 0xe0, 0x69, 0x4d, 0x89, 0x13, 0x12, 0x9b, 0x9c, 0x44, 0x84, 0x85, 0xe8,
	0x27, 0x7c, 0x1b, 0xce, 0x03, 0x62, 0x80, 0x0a, 0xa8, 0x6a, 0x56, 0x29, 0x81, 0xd7, 0x05, 0xf6,
	0xbf, 0xc3, 0xc6, 0xbd, 0x79, 0x40, 0x6c, 0x0e, 0x42, 0xdf, 0xe1, 0xc7, 0xc0, 0x77, 0xbc, 0x89,
	0x08, 0x1b, 0x6a, 0x05, 0x54, 0x3f, 0xd8, 0xb2, 0xd3, 0x6c, 0xc2, 0xcf, 0xd9, 0x5a, 0x2c, 0xa0,
	0x13, 0x46, 0x90, 0x01, 0xdf, 0xb3, 0x68, 0x38, 0x24, 0x8c, 0xf1, 0x7a, 0x45, 0x5b, 0x98, 0x48,
	0x83, 0xaa, 0x27, 0xe8, 0x54, 0xcf, 0x35, 0x4f, 0xd3, 0x7e, 0xfb, 0x81, 0xbb, 0xd1, 0x6f, 0x02,
	0x04, 0x02, 0x88, 0x6a, 0x50, 0xa7, 0xbe, 0xdb, 0x7d, 0xa2, 0xab, 0x9c, 0x7f, 0x8d, 0x9d, 0x90,
	0x99, 0x8c, 0x7d, 0x93, 0x60, 0xb3, 0xfe, 0xcd, 0x21, 0x44, 0x03, 0x3b, 0x0f, 0xf1, 0x23, 0x1d,
	0xa2, 0x4d, 0x7c, 0xb2, 0x75, 0x08, 0xd3, 0x4a, 0x8b, 0x09, 0xe0, 0x4b, 0xc5, 0xcc, 0x0e, 0x2c,
	0x89, 0x9c, 0x7d, 0xc7, 0xf7, 0x9e, 0xdb, 0xd1, 0xeb, 0x64, 0x6b, 0x43, 0x23, 0x4f, 0xb8, 0xeb,
	0xcc, 0xb5, 0x1a, 0xd4, 0xb3, 0xc7, 0x83, 0x20, 0x2c, 0xfc, 0xb5, 0xff, 0x75, 0xf6, 0x2c, 0x5d,
	0x59, 0xff, 0x9b, 0x2d, 0xfb, 0xa0, 0xdb, 0xd3, 0x81, 0x75, 0xa5, 0xc2, 0xe2, 0xa3, 0x38, 0x1d,
	0xa8, 0xc9, 0x57, 0x83, 0xbe, 0x64, 0x8e, 0x51, 0x3a, 0xdc, 0xf2, 0xd7, 0x2d, 0xd1, 0xa4, 0x63,
	0x53, 0xd9, 0x24, 0x4c, 0x14, 0xcc, 0x11, 0x4a, 0x97, 0x95, 0x23, 0x94, 0x65, 0x97, 0x09, 0x13,
	0x95, 0x72, 0x84, 0x92, 0xca, 0x39, 0x42, 0x59, 0x5a, 0x53, 0x41, 0xfd, 0x74, 0x57, 0x62, 0xe3,
	0x08, 0x67, 0x92, 0x32, 0xda, 0x96, 0xbf, 0x6d, 0x8d, 0x0b, 0xda, 0xe6, 0xaf, 0xc5, 0x12, 0x2b,
	0xd7, 0x4b, 0xac, 0xac, 0x96, 0x18, 0x9c, 0xc5, 0x18, 0x5c, 0xc4, 0x18, 0x5c, 0xc6, 0x18, 0x2c,
	0x62, 0x0c, 0x6e, 0x62, 0x0c, 0xee, 0x62, 0xac, 0xac, 0x62, 0x0c, 0xce, 0x6f, 0xb1, 0x32, 0x28,
	0x70, 0xbe, 0x3f, 0xf7, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xfb, 0x83, 0x11, 0x68, 0x04, 0x00,
	0x00,
}
